name: Deploy Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run TypeScript check
        run: yarn type-check

      - name: Run ESLint
        run: yarn lint

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.meta.outputs.tags }}
            ghcr.io/${{ github.repository }}:deploy-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 20
    steps:
      - name: Checkout repo (for configs upload)
        uses: actions/checkout@v4

      # dist больше не нужен: деплоим через готовый Docker-образ

      - name: Verify configs exist
        run: |
          ls -la caddy.json docker-compose.yml
          test -f caddy.json
          test -f docker-compose.yml

      - name: Upload docker-compose to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.yml"
          target: "~/portfolio"
          overwrite: true

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            mkdir -p ~/portfolio
            cd ~/portfolio
            export PROJECT_DIR=~/portfolio

            # Docker login в GHCR
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Настраиваем переменные образа для compose
            export IMAGE_REPO=ghcr.io/${{ github.repository }}
            export IMAGE_TAG=deploy-${{ github.sha }}
            set -a
            echo IMAGE_REPO="$IMAGE_REPO" > .env
            echo IMAGE_TAG="$IMAGE_TAG" >> .env
            set +a

            # Подтянуть и запустить новую версию
            docker compose -p portfolio -f docker-compose.yml --project-directory "$PROJECT_DIR" pull
            docker compose -p portfolio -f docker-compose.yml --project-directory "$PROJECT_DIR" up -d --remove-orphans
            
            docker compose -p portfolio -f docker-compose.yml --project-directory "$PROJECT_DIR" ps
            # Смоук-тест HTTP (ждём до 60с, пока контейнер готов)
            for i in {1..12}; do
              if curl -fsS http://localhost/ >/dev/null; then
                echo "Smoke OK"; break; fi; echo "waiting..."; sleep 5; done
            curl -fI http://localhost/ || (echo "Smoke test failed" && exit 1)
            echo "🎉 Деплой завершен!"
