name: Deploy Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run TypeScript check
        run: yarn type-check

      - name: Run ESLint
        run: yarn lint

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 2

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 20
    steps:
      - name: Checkout repo (for configs upload)
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist
          if-no-files-found: error

      - name: Verify artifact content
        run: |
          echo "Listing dist contents"
          ls -la dist || true
          COUNT=$(find dist -type f | wc -l || echo 0)
          echo "Files found in dist: $COUNT"
          if [ "$COUNT" -eq 0 ]; then
            echo "Artifact is empty (dist has 0 files). Check build job or artifact upload name." >&2
            exit 1
          fi

      - name: Prepare remote directory
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            mkdir -p ~/portfolio/dist

      - name: Upload dist to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "dist/**"
          target: "~/portfolio/dist"
          strip_components: 1
          overwrite: true

      - name: Verify configs exist
        run: |
          ls -la caddy.json docker-compose.yml
          test -f caddy.json
          test -f docker-compose.yml

      - name: Upload configs to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: |
            caddy.json
            docker-compose.yml
          target: "~/portfolio"
          overwrite: true

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            mkdir -p ~/portfolio
            cd ~/portfolio
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–ª–ª–æ–∞–¥, –±–µ–∑ –ø—Ä–æ—Å—Ç–æ—è
            docker compose -p portfolio run --rm -T portfolio caddy validate --config /etc/caddy/caddy.json
            if docker compose -p portfolio ps | grep -q "Up"; then
              docker compose -p portfolio exec -T portfolio caddy reload --config /etc/caddy/caddy.json || docker compose -p portfolio up -d
            else
              docker compose -p portfolio up -d
            fi
            
            docker compose -p portfolio ps
            echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
